name: aws-face-auth
description: User face authentication socket with aws rekognition. For basic authentication use 'user-auth' socket
version: 0.0.3
runtime: nodejs_v8

keywords:
  - user
  - face-auth
  - authentication
  - rekognition

config:
  AWS_REGION:
    description: AWS region
    required: true
  AWS_SECRET_ACCESS_KEY:
    description: AWS secret access key
    long_description: |
      Visit link to know more about managing keys
      (http://docs.aws.amazon.com/general/latest/gr/managing-aws-access-keys.html).
    required: true
  AWS_ACCESS_KEY_ID:
    description: AWS access key id
    long_description: |
      Visit link to know more about managing keys
      (http://docs.aws.amazon.com/general/latest/gr/managing-aws-access-keys.html).
    required: true
  COLLECTION_ID:
    description: ID of the collection to store face indexes.
    required: true
  FACE_MATCH_THRESHOLD:
    description: Specifies the minimum confidence in the face match to return. Minimum value of 0 and Maximum value of 100.
    required: true

classes:
  user:
    - name: face_auth
      type: boolean
      filter_index: true
    - name: external_image_id
      type: string
      filter_index: true
endpoints:
  create-collection:
    private: true
    description: Creates a collection in an AWS Region (Admin only)
    inputs:
      properties:
        collectionId:
          type: string
          description: ID for the collection that you are creating
          examples:
            - SyncanoFaces
    outputs:
      success:
        exit_code: 200
        description: Success
        examples:
          - |
            {
              "collectionArn": "12345",
              "statusCode": 200
            }
      fail:
        exit_code: 400
        description: Failed
        examples:
          - |
            {
              "statusCode": 400,
              "code": "ResourceAlreadyExistsException",
              "message":"A collection with the specified ID already exists."
            }

  delete-collection:
    private: true
    description: Deletes a collection in an AWS Region (Admin only)
    inputs:
      properties:
        collectionId:
          type: string
          description: ID of the collection to delete
          examples:
            - SyncanoFaces
    outputs:
      success:
        exit_code: 200
        description: Success
        examples:
          - |
            {
              "statusCode": 200
            }
      fail:
        exit_code: 400
        description: Failed
        examples:
          - |
            {
              "statusCode": 400,
              "code": "AccessDeniedException",
              "message":"You are not authorized to perform the action."
            }

  face-register:
    description: Register face to existing user account for face authentication.
    long_description: >
      Client-side to send user's username and password(expected user to approve by confirming password) to register face to user's account.
    inputs:
      properties:
        username:
          type: string
          description: User email
          examples:
            - you@domain.com
        password:
          type: string
          description: User password
          examples:
            - strong_password
        image:
          type: string
          description: A base64-encoded bytes or an S3 object key
          long_description: >
            When sending a base64-encoded bytes take of the string sample 'data:image/png;base64,' from beginning of encoded string.
        bucketName:
          type: string
          description: Name of s3 bucket. Leave empty if image not on s3 bucket.
    outputs:
      success:
        exit_code: 200
        description: Success
        examples:
          - |
            {
              message: "User face registered for face authentication."
            }
      fail:
        exit_code: 400
        description: Failed
        examples:
          - |
            {
              message: "Fail to register face."
            }

  face-login:
    description: Login to a user account using face image
    inputs:
      properties:
        image:
          type: string
          description: A base64-encoded bytes or an S3 object key
          long_description: >
            When sending a base64-encoded bytes take of the string sample 'data:image/png;base64,' from beginning of encoded string.
        bucketName:
          type: string
          description: Name of s3 bucket. Leave empty if image not on s3 bucket.
    outputs:
      success:
        exit_code: 200
        description: Success
        examples:
          - |
            {
              token: "cb21ff98ac8c7dda8fcd01",
              username: "you@domain.com"
            }
      fail:
        exit_code: 400
        description: Failed
        examples:
          - |
            {
              message: "Authentication fail."
            }

  remove-face-auth:
    description: Remove face authentication for particular user
    inputs:
      properties:
        username:
          type: string
          description: Username of user
          examples:
            - you@domain.com
        token:
          type: string
          description: User token
          examples:
            - cb21fac8c7dda8fcd0129b0adb0254dea5c8e
        image:
          type: string
          description: A base64-encoded bytes or an S3 object key
          long_description: >
            When sending a base64-encoded bytes take of the string sample 'data:image/png;base64,' from beginning of encoded string.
        bucketName:
          type: string
          description: Name of s3 bucket. Leave empty if image not on s3 bucket.
    outputs:
      success:
        exit_code: 200
        description: Success
        examples:
          - |
            {
              message: "User account removed from face authentication."
            }
      fail:
        exit_code: 400
        description: Failed
        examples:
          - |
            {
              message: "Face authentication not enabled for user account."
            }

  verify-face-auth:
    description: Checks if user face authentication is enabled
    inputs:
      properties:
        username:
          type: string
          description: Username of user
          examples:
            - you@domain.com
        token:
          type: string
          description: User token
          examples:
            - cb21fac8c7dda8fcd0129b0adb0254dea5c8e
    outputs:
      success:
        exit_code: 200
        description: Success
        examples:
          - |
            {
              message: "Face auth enabled on user account.",
              is_face_auth: true
            }
      fail:
        exit_code: 400
        description: Failed
        examples:
          - |
            {
              message: "Face auth not enabled on user account.",
              is_face_auth: false
            }
